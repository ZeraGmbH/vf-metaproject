#enable c++11
CONFIG += c++11

isEmpty( VEIN_BASEDIR ) {
  VEIN_BASEDIR = $$PWD
}

isEmpty( VF_AUTOGENERATED ) {
#enable usefull warnings
  QMAKE_CXXFLAGS += -Wold-style-cast -Wall -Wextra -Wparentheses -Wsuggest-attribute=const
  QMAKE_CXXFLAGS += -Wformat -Wformat-security -Wdeprecated -Wcast-align -Wshadow -Woverloaded-virtual

#give errors on nasty mistakes
  QMAKE_CXXFLAGS += -Werror=ignored-qualifiers -Werror=cast-qual -Werror=return-type -Werror=non-virtual-dtor -Werror=return-local-addr -Werror=empty-body

#gcc refuses to optimize BBOM code, so warn about any such cases
  QMAKE_CXXFLAGS += -Wdisabled-optimization

#if Qt is included with -isystem:
#  QMAKE_CXXFLAGS += -Wpadded -Wconversion -Wsign-conversion -Weffc++ -Wunsafe-loop-optimizations -Wzero-as-null-pointer-constant
#NOTE: use the following custom make steps otherwise:
#here /sdk is part of the relative path to Qt
# find . -regex .*Makefile.* -exec sed -i -e 's|-I\(\.\./[./]*\)/sdk|-isystem\1/sdk|g' {} \;
#here /work/sdk is the absolute path to Qt
# find . -regex .*Makefile.* -exec sed -i -e '/INCPATH/s#-I/work/sdk#-isystem/work/sdk#g' {} \;

#for newer gcc versions:
#  QMAKE_CXXFLAGS += -Wsuggest-override -Wduplicated-branches -Werror=duplicated-cond

#for true madness:
#  QMAKE_CXXFLAGS += -Werror

# warn on *any* usage of deprecated APIs, no matter in which Qt version they got marked as deprecated ...
  DEFINES += QT_DEPRECATED_WARNINGS

# ... and just fail to compile if APIs deprecated in Qt <= 5.7 are used
  DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x050700
}

isEmpty( VF_NO_DEPLOY ) {
  unix:equals(TEMPLATE, "lib") {
    DESTDIR = $$VEIN_BASEDIR/libs_Qt_$${QT_MAJOR_VERSION}_$${QT_MINOR_VERSION}_$${QT_PATCH_VERSION}
    VERSION = 0.0.1
  isEmpty( VF_NO_DEPLOY_HEADERS ) {
    public_headers.path = /usr/include
    INSTALLS += public_headers

    #link headers to $$VEIN_BASEDIR/include - this is not executed if there is nothing to link (e.g. headers-only projects)
    local_header_files = $$join(public_headers.files, " $$_PRO_FILE_PWD_/", $$_PRO_FILE_PWD_/)
    QMAKE_POST_LINK += ln -sf $${local_header_files} $$VEIN_BASEDIR/include
  }
  }

  android:equals(TEMPLATE, "lib") {
    DESTDIR = $$PWD/libs-android
    VERSION = 0.0.1
  }

  unix:equals(TEMPLATE, "staticlib") {
    DESTDIR = $$PWD/libs_Qt_$${QT_MAJOR_VERSION}_$${QT_MINOR_VERSION}_$${QT_PATCH_VERSION}
  }

  android:equals(TEMPLATE, "staticlib") {
    DESTDIR = $$PWD/libs-android
  }

  unix:equals(TEMPLATE, "app") {
    DESTDIR = $$PWD/bin_Qt_$${QT_MAJOR_VERSION}_$${QT_MINOR_VERSION}_$${QT_PATCH_VERSION}
  }
}



XIQNET_INCLUDEDIR = $$VEIN_BASEDIR/transport/xiqnet/
VEIN_TCP_INCLUDEDIR = $$VEIN_BASEDIR/transport/vein-tcp/
VEIN_QML_INCLUDEDIR = $$VEIN_BASEDIR/api/qml-veinentity/
VEIN_EVENT_INCLUDEDIR = $$VEIN_BASEDIR/processing/vein-event/
VEIN_COMP_INCLUDEDIR = $$VEIN_BASEDIR/processing/vein-component/
VEIN_SCRIPT_INCLUDEDIR = $$VEIN_BASEDIR/processing/vein-script/
VEIN_HASH_INCLUDEDIR = $$VEIN_BASEDIR/storage/vein-hash/
VEIN_PROTOBUF_INLCUDEDIR = $$shadowed($$VEIN_BASEDIR)/transport/libvein-protobuf/
VEIN_NET_INCLUDEDIR = $$VEIN_BASEDIR/transport/vein-net/
VEIN_NET2_INCLUDEDIR = $$VEIN_BASEDIR/transport/vein-net2/
VEIN_HELPER_INCLUDEDIR = $$VEIN_BASEDIR/utils/helpers
VEIN_LOGGER_INCLUDEDIR = $$VEIN_BASEDIR/processing/vein-logger
VEIN_BINARY_LOGGER_INCLUDEDIR = $$VEIN_BASEDIR/processing/vein-binary-logger
VEIN_CRYPTOBRIDGE_INCLUDEDIR = $$VEIN_BASEDIR/utils/vf-crypto-bridge


unix:!android {
  LIBS += -L $$VEIN_BASEDIR/libs_Qt_$${QT_MAJOR_VERSION}_$${QT_MINOR_VERSION}_$${QT_PATCH_VERSION}
}

#android {
  #INCLUDEPATH += /work/downloads/protobuf-2.5.0/src
  #LIBS += -L/work/downloads/protobuf-2.5.0/build/lib/
  #VEIN_ANDROID_LIBDIR = $$VEIN_BASEDIR/libs-android
  #LIBS += -L $$VEIN_BASEDIR/libs-android

  #do not flood the debug output with useless messages
  #DEFINES += VF_NO_DEBUG=1
#}

# this will allow colored debug output
DEFINES += VEIN_COLORS_SUPPORT


#dependency tracking without config code duplication
defined(VEIN_DEP_EVENT, var) {
  INCLUDEPATH += $$VEIN_EVENT_INCLUDEDIR
  LIBS += $$VEIN_EVENT_LIBDIR -lvein-event
}

defined(VEIN_DEP_COMP, var) {
  INCLUDEPATH += $$VEIN_COMP_INCLUDEDIR
  LIBS += $$VEIN_COMP_LIBDIR -lvein-component
}

defined(VEIN_DEP_SCRIPT, var) {
  INCLUDEPATH += $$VEIN_SCRIPT_INCLUDEDIR
  LIBS += $$VEIN_SCRIPT_LIBDIR -lvein-script
}

defined(VEIN_DEP_HASH, var) {
  INCLUDEPATH += $$VEIN_HASH_INCLUDEDIR
  LIBS += $$VEIN_HASH_LIBDIR -lvein-hash
}

defined(VEIN_DEP_TCP, var) {
  INCLUDEPATH += $$XIQNET_INCLUDEDIR
  LIBS += $$XIQNET_LIBDIR -lxiqnet
}

defined(VEIN_DEP_TCP2, var) {
  INCLUDEPATH += $$VEIN_TCP_INCLUDEDIR
  LIBS += $$VEIN_TCP_LIBDIR -lvein-tcp
}


defined(VEIN_DEP_NET, var) {
  INCLUDEPATH += $$VEIN_NET_INCLUDEDIR
  LIBS += $$VEIN_NET_LIBDIR -lvein-net
}

defined(VEIN_DEP_NET2, var) {
  INCLUDEPATH += $$VEIN_NET2_INCLUDEDIR
  LIBS += $$VEIN_NET2_LIBDIR -lvein-net2
}

defined(VEIN_DEP_HELPER, var) {
  INCLUDEPATH += $$VEIN_HELPER_INCLUDEDIR
#currently only an inlined template is provided from the helper, link the library if necessary
#  LIBS += $$VEIN_HELPER_LIBDIR -lvein-helper
}

defined(VEIN_DEP_QML, var) {
  INCLUDEPATH += $$VEIN_QML_INCLUDEDIR
  LIBS += $$VEIN_QML_LIBDIR -lqml-veinentity
}

defined(VEIN_DEP_CCAPI, var) {
  INCLUDEPATH += $$VEIN_INCLUDEDIR
  LIBS += $$VEIN_LIBDIR -lvein-qt
}

defined(VEIN_DEP_LOGGER, var) {
  INCLUDEPATH += $$VEIN_LOGGER_INCLUDEDIR
  LIBS += $$VEIN_LOGGER_LIBDIR -lvein-logger
}

defined(VEIN_DEP_CRYPTOBRIDGE, var) {
  INCLUDEPATH += $$VEIN_CRYPTOBRIDGE_INCLUDEDIR
  LIBS += $$VEIN_CRYPTOBRIDGE_LIBDIR -lvf-crypto-bridge
}

